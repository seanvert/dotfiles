* init

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(unless (package-installed-p 'use-package)
;;  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)

(setq desktop-load-locked-desktop t)

(add-to-list 'load-path "~/.emacs.d/lisp/")

#+END_SRC

#+RESULTS:
| ~/.emacs.d/lisp/ | /home/sean/.emacs.d/elpa/anki-editor-20190922.1223 | /home/sean/.emacs.d/elpa/auto-compile-20191020.1040 | /home/sean/.emacs.d/elpa/auto-complete-20170125.245 | /home/sean/.emacs.d/elpa/auto-org-md-20180213.2343 | /home/sean/.emacs.d/elpa/auto-yasnippet-20191015.942 | /home/sean/.emacs.d/elpa/company-anaconda-20200404.1859 | /home/sean/.emacs.d/elpa/anaconda-mode-20200714.612 | /home/sean/.emacs.d/elpa/company-auctex-20200529.1835 | /home/sean/.emacs.d/elpa/auctex-12.2.4/ | /home/sean/.emacs.d/elpa/auctex-12.2.4 | /home/sean/.emacs.d/elpa/company-box-20200511.401 | /home/sean/.emacs.d/elpa/company-ghci-20190707.311 | /home/sean/.emacs.d/elpa/company-irony-20190124.2346 | /home/sean/.emacs.d/elpa/company-lsp-20190612.1553 | /home/sean/.emacs.d/elpa/company-math-20200131.2337 | /home/sean/.emacs.d/elpa/company-org-roam-20200711.355 | /home/sean/.emacs.d/elpa/company-quickhelp-20200714.1611 | /home/sean/.emacs.d/elpa/cyberpunk-theme-20200601.1632 | /home/sean/.emacs.d/elpa/dap-mode-20200725.1307 | /home/sean/.emacs.d/elpa/bui-20200426.2219 | /home/sean/.emacs.d/elpa/deferred-20170901.1330 | /home/sean/.emacs.d/elpa/deft-20200515.1513 | /home/sean/.emacs.d/elpa/django-mode-20170522.714 | /home/sean/.emacs.d/elpa/edit-server-20181016.1125 | /home/sean/.emacs.d/elpa/eink-theme-20190219.858 | /home/sean/.emacs.d/elpa/emmet-mode-20180613.341 | /home/sean/.emacs.d/elpa/ess-smart-underscore-20190309.101 | /home/sean/.emacs.d/elpa/ess-20200721.1405/obsolete | /home/sean/.emacs.d/elpa/ess-20200721.1405 | /home/sean/.emacs.d/elpa/ewal-spacemacs-themes-20190911.1305 | /home/sean/.emacs.d/elpa/ewal-20200305.230 | /home/sean/.emacs.d/elpa/flycheck-cask-20191030.2253 | /home/sean/.emacs.d/elpa/flycheck-clojure-20191215.2227 | /home/sean/.emacs.d/elpa/flycheck-cython-20170724.958 | /home/sean/.emacs.d/elpa/flycheck-demjsonlint-20161115.718 | /home/sean/.emacs.d/elpa/flycheck-haskell-20200218.753 | /home/sean/.emacs.d/elpa/flycheck-irony-20180604.2152 | /home/sean/.emacs.d/elpa/flycheck-package-20200304.2151 | /home/sean/.emacs.d/elpa/flycheck-plantuml-20171018.111 | /home/sean/.emacs.d/elpa/flycheck-pycheckers-20200704.433 | /home/sean/.emacs.d/elpa/frames-only-mode-20200518.800 | /home/sean/.emacs.d/elpa/gif-screencast-20200327.1332 | /home/sean/.emacs.d/elpa/god-mode-20200708.2200 | /home/sean/.emacs.d/elpa/haskell-snippets-20160919.22 | /home/sean/.emacs.d/elpa/helm-c-yasnippet-20200520.1519 | /home/sean/.emacs.d/elpa/helm-cider-20180307.458 | /home/sean/.emacs.d/elpa/cider-20200718.1908 | /home/sean/.emacs.d/elpa/clojure-mode-20200419.559 | /home/sean/.emacs.d/elpa/helm-dash-20190527.1118 | /home/sean/.emacs.d/elpa/dash-docs-20200516.1943 | /home/sean/.emacs.d/elpa/helm-lsp-20200701.2042 | /home/sean/.emacs.d/elpa/helm-make-20200620.27 | /home/sean/.emacs.d/elpa/helm-org-rifle-20200512.1943 | /home/sean/.emacs.d/elpa/helm-swoop-20200515.417 | /home/sean/.emacs.d/elpa/howdoyou-20191118.2222 | /home/sean/.emacs.d/elpa/html-to-markdown-20151105.840 | /home/sean/.emacs.d/elpa/indium-20200116.1247 | /home/sean/.emacs.d/elpa/intero-20200125.848 | /home/sean/.emacs.d/elpa/company-20200725.2348 | /home/sean/.emacs.d/elpa/flycheck-20200610.1809 | /home/sean/.emacs.d/elpa/irony-20200130.849 | /home/sean/.emacs.d/elpa/js2-refactor-20190630.2108 | /home/sean/.emacs.d/elpa/json-mode-20190123.422 | /home/sean/.emacs.d/elpa/json-process-client-20190827.1858 | /home/sean/.emacs.d/elpa/json-reformat-20160212.853 | /home/sean/.emacs.d/elpa/json-snatcher-20150512.347 | /home/sean/.emacs.d/elpa/julia-mode-20200717.1915 | /home/sean/.emacs.d/elpa/keycast-20200612.2247 | /home/sean/.emacs.d/elpa/leetcode-20200711.840 | /home/sean/.emacs.d/elpa/aio-20200610.1904 | /home/sean/.emacs.d/elpa/graphql-20180912.31 | /home/sean/.emacs.d/elpa/linum-relative-20180124.1047 | /home/sean/.emacs.d/elpa/lsp-clangd-20180828.1657 | /home/sean/.emacs.d/elpa/lsp-haskell-20200527.2014 | /home/sean/.emacs.d/elpa/haskell-mode-20200531.2255 | /home/sean/.emacs.d/elpa/lsp-python-20181108.754 | /home/sean/.emacs.d/elpa/lsp-treemacs-20200725.1143 | /home/sean/.emacs.d/elpa/lsp-ui-20200718.1035 | /home/sean/.emacs.d/elpa/lsp-mode-20200726.1814 | /home/sean/.emacs.d/elpa/dash-functional-20200617.702 | /home/sean/.emacs.d/elpa/magit-20200723.236 | /home/sean/.emacs.d/elpa/git-commit-20200701.2112 | /home/sean/.emacs.d/elpa/markdown-mode-20200724.633 | /home/sean/.emacs.d/elpa/math-symbol-lists-20200131.2333 | /home/sean/.emacs.d/elpa/memoize-20200103.2036 | /home/sean/.emacs.d/elpa/mode-icons-20190627.2121 | /home/sean/.emacs.d/elpa/multi-term-20200514.428 | /home/sean/.emacs.d/elpa/multiple-cursors-20191210.1759 | /home/sean/.emacs.d/elpa/nov-20200608.1339 | /home/sean/.emacs.d/elpa/esxml-20171129.807 | /home/sean/.emacs.d/elpa/ob-sml-20130829.1843 | /home/sean/.emacs.d/elpa/org-bullets-20200317.1740 | /home/sean/.emacs.d/elpa/org-download-20200615.936 | /home/sean/.emacs.d/elpa/org-drill-20200412.1812 | /home/sean/.emacs.d/elpa/org-journal-20200719.1545 | /home/sean/.emacs.d/elpa/org-noter-20191020.1212 | /home/sean/.emacs.d/elpa/org-plus-contrib-20200720 | /home/sean/.emacs.d/elpa/org-pomodoro-20190530.1445 | /home/sean/.emacs.d/elpa/alert-20200303.2118 | /home/sean/.emacs.d/elpa/log4e-20200420.745 | /home/sean/.emacs.d/elpa/gntp-20141025.250 | /home/sean/.emacs.d/elpa/org-pretty-tags-20200303.2201 | /home/sean/.emacs.d/elpa/org-ref-20200710.1516 | /home/sean/.emacs.d/elpa/key-chord-20160227.1238 | /home/sean/.emacs.d/elpa/ivy-20200624.1140 | /home/sean/.emacs.d/elpa/helm-bibtex-20200429.1606 | /home/sean/.emacs.d/elpa/helm-20200722.1531 | /home/sean/.emacs.d/elpa/helm-core-20200726.943 | /home/sean/.emacs.d/elpa/htmlize-20191111.2130 | /home/sean/.emacs.d/elpa/org-roam-bibtex-20200716.1450 | /home/sean/.emacs.d/elpa/bibtex-completion-20200513.852 | /home/sean/.emacs.d/elpa/biblio-20200416.1407 | /home/sean/.emacs.d/elpa/biblio-core-20200416.307 | /home/sean/.emacs.d/elpa/org-roam-20200726.1703 | /home/sean/.emacs.d/elpa/emacsql-sqlite3-20200718.614 | /home/sean/.emacs.d/elpa/emacsql-20190625.1859 | /home/sean/.emacs.d/elpa/ox-epub-20181101.1854 | /home/sean/.emacs.d/elpa/ox-jekyll-md-20180831.1732 | /home/sean/.emacs.d/elpa/ox-reveal-20200703.2313 | /home/sean/.emacs.d/elpa/org-20200720 | /home/sean/.emacs.d/elpa/package-lint-20200616.2257 | /home/sean/.emacs.d/elpa/packed-20180318.1729 | /home/sean/.emacs.d/elpa/pandoc-20161128.1157 | /home/sean/.emacs.d/elpa/pandoc-mode-20200303.2322 | /home/sean/.emacs.d/elpa/parsebib-20200513.2352 | /home/sean/.emacs.d/elpa/parseedn-20200419.1124 | /home/sean/.emacs.d/elpa/parseclj-20190531.711 | /home/sean/.emacs.d/elpa/a-20180907.953 | /home/sean/.emacs.d/elpa/pdf-view-restore-20190904.1708 | /home/sean/.emacs.d/elpa/pdf-tools-20200512.1524 | /home/sean/.emacs.d/elpa/let-alist-1.0.6 | /home/sean/.emacs.d/elpa/pdfgrep-20200306.209 | /home/sean/.emacs.d/elpa/persist-0.4 | /home/sean/.emacs.d/elpa/plantuml-mode-20191102.2056 | /home/sean/.emacs.d/elpa/polymode-20200606.1106 | /home/sean/.emacs.d/elpa/popup-20200610.317 | /home/sean/.emacs.d/elpa/pos-tip-20191227.1356 | /home/sean/.emacs.d/elpa/posframe-20200629.239 | /home/sean/.emacs.d/elpa/projectile-20200710.947 | /home/sean/.emacs.d/elpa/pkg-info-20150517.1143 | /home/sean/.emacs.d/elpa/epl-20180205.2049 | /home/sean/.emacs.d/elpa/promise-20200530.630 | /home/sean/.emacs.d/elpa/pythonic-20200304.1901 | /home/sean/.emacs.d/elpa/queue-0.2 | /home/sean/.emacs.d/elpa/rainbow-delimiters-20191018.1233 | /home/sean/.emacs.d/elpa/request-20200517.1305 | /home/sean/.emacs.d/elpa/sesman-20190909.1754 | /home/sean/.emacs.d/elpa/skewer-mode-20200304.1142 | /home/sean/.emacs.d/elpa/js2-mode-20200725.112 | /home/sean/.emacs.d/elpa/simple-httpd-20191103.1446 | /home/sean/.emacs.d/elpa/smartparens-20200324.2147 | /home/sean/.emacs.d/elpa/sml-mode-6.10 | /home/sean/.emacs.d/elpa/solarized-theme-20200717.1054 | /home/sean/.emacs.d/elpa/spaceline-20191230.1221 | /home/sean/.emacs.d/elpa/powerline-20200105.2053 | /home/sean/.emacs.d/elpa/spacemacs-theme-20200615.1304 | /home/sean/.emacs.d/elpa/spinner-1.7.3 | /home/sean/.emacs.d/elpa/tablist-20200427.2205 | /home/sean/.emacs.d/elpa/transient-20200719.955 | /home/sean/.emacs.d/elpa/tree-mode-20151104.1331 | /home/sean/.emacs.d/elpa/treemacs-20200716.2041 | /home/sean/.emacs.d/elpa/ht-20200217.2331 | /home/sean/.emacs.d/elpa/hydra-20200711.1210 | /home/sean/.emacs.d/elpa/lv-20200507.1518 | /home/sean/.emacs.d/elpa/pfuture-20200425.1357 | /home/sean/.emacs.d/elpa/ace-window-20200606.1259 | /home/sean/.emacs.d/elpa/avy-20200624.1148 | /home/sean/.emacs.d/elpa/f-20191110.1357 | /home/sean/.emacs.d/elpa/dash-20200524.1947 | /home/sean/.emacs.d/elpa/try-20181204.236 | /home/sean/.emacs.d/elpa/typescript-mode-20200430.1232 | /home/sean/.emacs.d/elpa/undo-tree-0.7.4 | /home/sean/.emacs.d/elpa/use-package-20200721.2156 | /home/sean/.emacs.d/elpa/bind-key-20191110.416 | /home/sean/.emacs.d/elpa/web-mode-20200612.1038 | /home/sean/.emacs.d/elpa/websocket-20200419.2124 | /home/sean/.emacs.d/elpa/which-key-20200721.1927 | /home/sean/.emacs.d/elpa/with-editor-20200720.2014 | /home/sean/.emacs.d/elpa/async-20200113.1745 | /home/sean/.emacs.d/elpa/writeroom-mode-20200519.37 | /home/sean/.emacs.d/elpa/visual-fill-column-20200428.816 | /home/sean/.emacs.d/elpa/yasnippet-snippets-20200606.1149 | /home/sean/.emacs.d/elpa/s-20180406.808 | /home/sean/.emacs.d/elpa/yasnippet-20200604.246 | /home/sean/.emacs.d/elpa/zenburn-theme-20200701.1333 | /usr/share/emacs/26.3/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/site-lisp/auctex | /usr/share/emacs/site-lisp/mu4e | /usr/share/emacs/site-lisp/auctex/images | /usr/share/emacs/26.3/lisp | /usr/share/emacs/26.3/lisp/vc | /usr/share/emacs/26.3/lisp/url | /usr/share/emacs/26.3/lisp/textmodes | /usr/share/emacs/26.3/lisp/progmodes | /usr/share/emacs/26.3/lisp/play | /usr/share/emacs/26.3/lisp/org | /usr/share/emacs/26.3/lisp/nxml | /usr/share/emacs/26.3/lisp/net | /usr/share/emacs/26.3/lisp/mh-e | /usr/share/emacs/26.3/lisp/mail | /usr/share/emacs/26.3/lisp/leim | /usr/share/emacs/26.3/lisp/language | /usr/share/emacs/26.3/lisp/international | /usr/share/emacs/26.3/lisp/image | /usr/share/emacs/26.3/lisp/gnus | /usr/share/emacs/26.3/lisp/eshell | /usr/share/emacs/26.3/lisp/erc | /usr/share/emacs/26.3/lisp/emulation | /usr/share/emacs/26.3/lisp/emacs-lisp | /usr/share/emacs/26.3/lisp/cedet | /usr/share/emacs/26.3/lisp/calendar | /usr/share/emacs/26.3/lisp/calc | /usr/share/emacs/26.3/lisp/obsolete |

** server mode

#+BEGIN_SRC emacs-lisp
;;(server-start)
(if (and (fboundp 'server-running-p)
 		 (not (server-running-p)))
 	(server-start)
 1)

#+END_SRC

#+RESULTS:
: 1

** CANCELADO conserta o teclado
essas funções são para o teclado do meu notebook que está com algumas
teclas quebradas. Arrumei com o xmodmap. Vou deixar isso aqui caso dê
algum problema nele

#+begin_src emacs-lisp
;; (define-key key-translation-map (kbd "<f1>") (kbd "TAB"))
;; (define-key key-translation-map (kbd "<f2>") (kbd "("))
;; (define-key key-translation-map (kbd "<f5>") (kbd "+"))
;; (define-key key-translation-map (kbd "<f6>") (kbd "-"))
;; (define-key key-translation-map (kbd "<f7>") (kbd "="))
;; (define-key key-translation-map (kbd "<f8>") (kbd "_"))
;; (define-key key-translation-map (kbd "<f9>") (kbd "õ"))
;; (define-key key-translation-map (kbd "<f11>") (kbd "ã"))
;; (define-key key-translation-map (kbd "<C-f1>") (kbd "1"))
;; (define-key key-translation-map (kbd "<C-f2>") (kbd "2"))
;; (define-key key-translation-map (kbd "<C-f3>") (kbd "3"))
;; (define-key key-translation-map (kbd "<C-f4>") (kbd "4"))
;; (define-key key-translation-map (kbd "<C-f5>") (kbd "5"))
;; (define-key key-translation-map (kbd "<C-f6>") (kbd "6"))
;; (define-key key-translation-map (kbd "<C-f7>") (kbd "7"))
;; (define-key key-translation-map (kbd "<C-f8>") (kbd "8"))
;; (define-key key-translation-map (kbd "<C-f9>") (kbd "9"))
#+end_src

#+RESULTS:

** exec path

#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":~/.local/bin"))
(setq exec-path (append exec-path '("~/.local/bin")))
#+END_SRC

#+RESULTS:
| /home/sean/.opam/default/bin | /usr/local/sbin | /usr/local/bin | /usr/bin | /usr/lib/jvm/default/bin | /usr/bin/site_perl | /usr/bin/vendor_perl | /usr/bin/core_perl | /usr/lib/smlnj/bin | /usr/lib/emacs/26.3/x86_64-pc-linux-gnu | ~/.local/bin | ~/.local/bin | ~/.local/bin |

** esup emacs start time

#+begin_src emacs-lisp
#+end_src

#+RESULTS:

* PRONTO ajeitar as keywords antigas que eu acabei trocando
* repositórios

#+BEGIN_SRC emacs-lisp
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))

#+END_SRC

#+RESULTS:

* acentos

#+BEGIN_SRC emacs-lisp
(require 'iso-transl)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

#+RESULTS:
: utf-8-unix

* aparência
** ewal

#+begin_src emacs-lisp
(use-package ewal
  :init (setq ewal-use-built-in-always-p nil
              ewal-use-built-in-on-failure-p nil
              ewal-built-in-palette "sexy-material"))
;; (use-package ewal-spacemacs-themes
;;   :init (progn
;;           (setq spacemacs-theme-underline-parens t
;;                 my:rice:font (font-spec
;;                               :family "Source Code Pro"
;;                               :weight 'semi-bold
;;                               :size 11.0))
;;           (show-paren-mode +1)
;;           (global-hl-line-mode)
;;           (set-frame-font my:rice:font nil t)
;;           (add-to-list  'default-frame-alist
;;                         `(font . ,(font-xlfd-name my:rice:font))))
;;   :config (progn
;;             (load-theme 'ewal-spacemacs-modern t)
;;             (enable-theme 'ewal-spacemacs-modern)))



#+end_src

#+RESULTS:
** texto
#+begin_src emacs-lisp
(visual-line-mode t)
#+end_src

#+RESULTS:
: t
** tema

#+BEGIN_SRC emacs-lisp
;;(use-package cyberpunk-theme)
;; (use-package spaceline
;;   :after (winum)
;;   :init (setq powerline-default-separator nil)
;;   :config (spaceline-spacemacs-theme))
;; highlight lines
(global-hl-line-mode)
;; eink theme
;; (use-package eink-theme)
;; (use-package solarized-theme)
;; (load-theme 'solarized-light-high-contrast t)
;;(use-package zenburn-theme)
;;(use-package monokai-theme)
;; (use-package gruvbox-theme
;;   :config
;;   (load-theme 'gruvb-light-hard t))
;; 
;; (set-face-attribute 'default nil :family "Iosevka" :height 130)
;; (set-face-attribute 'fixed-pitch nil :family "Sans Serif")
;; (set-face-attribute 'variable-pitch nil :family "Baskerville")

#+END_SRC

#+RESULTS:
: t

** barra de rolagem, menu e modeline. scroll step

#+begin_src emacs-lisp
(scroll-bar-mode -1)
(setq scroll-step            1
      scroll-conservatively  10000)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

#+RESULTS:

** writeroom mode
#+begin_src emacs-lisp
(use-package writeroom-mode)
(with-eval-after-load 'writeroom-mode
  (define-key writeroom-mode-map (kbd "C-M-<") #'writeroom-decrease-width)
  (define-key writeroom-mode-map (kbd "C-M->") #'writeroom-increase-width)
  (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-adjust-width))
(setq writeroom-width 120)
#+end_src

#+RESULTS:
: 120

** modeline

#+begin_src emacs-lisp
;;(powerline-default-theme)

(setq-default mode-line-buffer-identification (list -40 (propertized-buffer-identification "%12b")))
#+end_src

#+RESULTS:
| -40 | (%12b) |

** pretty printing

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode 1)
#+END_SRC

#+RESULTS:
: t

** all the icons

#+BEGIN_SRC emacs-lisp
;;(use-package all-the-icons)
#+END_SRC

#+RESULTS:

** mode icons
#+begin_src emacs-lisp
;; (use-package mode-icons
;;    :after all-the-icons
;;    :config
;;    (mode-icons-mode))

#+end_src

#+RESULTS:

* configurações
  
** ESPERANDO autosave
para não encher o de arquivos com autosave, enfia tudo numa pasta só
tá junto com o tramp
#+begin_src emacs-lisp
(defvar user-temporary-file-directory "~/.emacs-autosaves/")
(make-directory user-temporary-file-directory t)
(setq backup-by-copying t)
(setq backup-directory-alist `(("." . ,user-temporary-file-directory) 
			       (tramp-file-name-regexp nil)))
(setq auto-save-list-file-prefix (concat user-temporary-file-directory ".auto-saves-"))
(setq auto-save-file-name-transforms `((".*" ,user-temporary-file-directory t)))
#+end_src

#+RESULTS:
| .* | ~/.emacs-autosaves/ | t |

** diretórios
#+begin_src emacs-lisp
(setq
   org_notes "/ubuntu/home/sean/" ;; (concat (getenv "HOME") "/Git/Gitlab/Mine/Notes/")
   zot_bib (concat (getenv "HOME") "/Minha biblioteca.bib")
   org-directory org_notes
   deft-directory org_notes
   org-roam-directory org_notes
   )
#+end_src

#+RESULTS:
: /ubuntu/home/sean/

* extensões adicionais
** PRA FAZER pdf tools 
montar um esquema dentro do emacs pra tirar pedaços de imagens de pdfs
#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-view-mode-hook (lambda () (linum-mode -1)))
(use-package pdf-view-restore)
(add-hook 'pdf-view-mode-hook (lambda () (pdf-view-restore-mode t)))
(use-package pdfgrep)
(use-package pdf-tools
  :ensure t
  ;; :pin manual ;; manually update
  :config
  ;; initialise
  (pdf-tools-install)
  ;; numero de páginas no cache. default 64
  (setq pdf-cache-image-limit 15)
  ;; tempo que ele demora pra apagar uma imagem do cache
  (setq image-cache-eviction-delay 30)
  ;; open pdfs scaled to fit page
  ;; fit-height, fit-width, fit-page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; 
  ;; use normal isearch
  ;; (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  ;; turn off cua so copy works
  (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  ;; keyboard shortcuts
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
  (define-key pdf-view-mode-map (kbd "z") 'org-noter))

;; troca a cor do midnight mode para combinar com a cor do tema
(setq pdf-view-midnight-colors (cons (face-attribute 'default :foreground) (face-attribute 'default :background)))
#+END_SRC

#+RESULTS:
: t

*** extensão para estimar o tempo

#+begin_src emacs-lisp
;; TODO FAZER O BÁSICO PRIMEIRO
(setq pdf-time-before 0)
(setq pdf-time-after 0)
;; TODO adicionar uma função para chamar isso
(add-hook 'pdf-view-after-change-page-hook (lambda () (progn (set-pdf-time-after)
														(message (int-to-string (- pdf-time-after pdf-time-before)))
														(set-pdf-time-before))))

(defun set-pdf-time-after ()
  (setq pdf-time-after (hhmmtomm (car (split-string (substring-no-properties display-time-string) " ")))))

(defun set-pdf-time-before ()
  (setq pdf-time-before (hhmmtomm (car (split-string (substring-no-properties display-time-string) " ")))))

;; TODO uma função que checa se avançamos nas páginas
(defun pdf-check-page-advance ()
  (interactive)
  "checks if we are going forward on non-read pages"
  (if (not (member (pdf-view-current-page) pdf-time-pages))
	  (setq pdf-time-pages (append (pdf-view-current-page)))))
;; TODO uma função que conta o tempo numa página
;; TODO uma outra função que estima o tempo final
;; TODO uma função que pega a última página como algo arbitrário para remover índices no final

#+end_src

#+RESULTS:
: pdf-check-page-advance


*** match pdf colors with theme colors

y#+begin_src emacs-lisp
(setq pdf-view-midnight-colors (cons (face-attribute 'default :background) (face-attribute 'default :foreground))
;; (setq pdf-view-midnight-colors (cons "#282828" "#f9f5d7"))
;; ("#839496" . "#002b36")

#+end_src

#+RESULTS:
: (#282828 . #f9f5d7)

*** testes pdf1
#+begin_src emacs-lisp
;; (defun org-noter-insert-selected-text-inside-note-content ()
;;   (interactive)
;;   (progn (setq currenb (buffer-name))
;; 		 (org-noter-insert-precise-note)
;; 		 (set-buffer currenb)
;; 		 (org-noter-insert-note)))


;; (define-key pdf-view-mode-map (kbd "y") 'org-noter-insert-selected-text-inside-note-content)

#+end_src

#+RESULTS:
** flyspell
#+begin_src emacs-lisp
  ;; (define-key flyspell-mode-map (kbd "C-,") #'flyspell-goto-next-error)

#+end_src

#+RESULTS:

** try

#+BEGIN_SRC emacs-lisp
(use-package try)

#+END_SRC

#+RESULTS:

** rainbow mode 
visualizar cores no buffer
#+begin_src emacs-lisp
(use-package rainbow-mode)



#+end_src

** nov mode (epub)

#+BEGIN_SRC emacs-lisp
(use-package nov)
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; (setq visual-fill-column-center-text t)
;; (setq nov-text-width t)
;;(setq nov-text-width 50)
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
(add-hook 'nov-mode-hook 'visual-line-mode)
;; justification on buffers
(load "justify-kp")
;; (use-package justify-kp)
(setq nov-text-width t)

(defun my-nov-window-configuration-change-hook ()
  (my-nov-post-html-render-hook)
  (remove-hook 'window-configuration-change-hook
               'my-nov-window-configuration-change-hook
               t))

(defun my-nov-post-html-render-hook ()
  (if (get-buffer-window)
      (let ((max-width (pj-line-width))
            buffer-read-only)
        (save-excursion
          (goto-char (point-min))
          (while (not (eobp))
            (when (not (looking-at "^[[:space:]]*$"))
              (goto-char (line-end-position))
              (when (> (shr-pixel-column) max-width)
                (goto-char (line-beginning-position))
                (pj-justify)))
            (forward-line 1))))
    (add-hook 'window-configuration-change-hook
              'my-nov-window-configuration-change-hook
              nil t)))

(add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)
;;(add-hook 'nov-mode-hook 'visual-fill-column-mode)
#+END_SRC

#+RESULTS:
| my-nov-post-html-render-hook |

** smart parens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :config
  (global-set-key (kbd "C-<right>") 'sp-forward-slurp-sexp)
  (global-set-key (kbd "C-<left>") 'sp-forward-barf-sexp)
  (global-set-key (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
  (global-set-key (kbd "C-M-<right>") 'sp-backward-barf-sexp))
#+END_SRC

#+RESULTS:
| company-mode | (lambda nil (progn (linum-relative-mode 1) (smartparens-mode 1) (rainbow-delimiters-mode 1))) | smartparens-mode |

** CANCELADO leet code

#+BEGIN_SRC emacs-lisp
;; (use-package leetcode)
;; (setq leetcode-prefer-language "python3")
;; (setq leetcode-prefer-sql "mysql")
#+END_SRC

#+RESULTS:

** zettelkasten
#+begin_src emacs-lisp
(use-package deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        ;; de-couples filename and note title:
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :config
  (add-to-list 'deft-extensions "tex")
  )
;; (use-package zetteldeft
;;    :after deft
;;    :config
;;    (zetteldeft-set-classic-keybindings))
#+end_src

#+RESULTS:

** relative linum

#+BEGIN_SRC emacs-lisp
(use-package linum-relative)
(column-number-mode 1)
(setq linum-relative-current-symbol "")
#+END_SRC

#+RESULTS:

** rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

#+RESULTS:

** anki
https://yiufung.net/post/anki-org/
- By default anki-editor-cloze-{dwim,region} always asks for hints and
  requires card number input. I don’t use hints much, and usually want
  card number to increase, so two helper functions
  anki-editor-cloze-region-{auto-incr,dont-incr} are written to skip
  these behaviors. (Note: Such kind of customizations are ubiquitous
  in Emacs community, where users don’t have to wait for upstream to
  implement a desired new feature. This is quite different from Anki
  community where version updates frequently break existing add-ons,
  leaving end-users hands tied, or new features being delayed due to
  technical difficulty in understanding the code base.)

- A function is added to org-capture-after-finalize-hook to reset
  cloze number to 1 after each capture

- By default anki-editor-push-notes will push the whole file. This is
  slow when the file contain old entries that didn’t really need to
  change. In my workflow, I keep all pending notes under Dispatch
  Shelf subtree, and push that whole subtree (with <f9>) when I feel
  ready. Once they’re pushed, I would refile/relocate them under
  Exported subtree. anki-editor-push-tree is added for this purpose.

- Assign handy keybindings (<f9>-<f12> in this case) to your liking.
#+begin_src emacs-lisp
(use-package anki-editor
  :after org
  :bind (:map org-mode-map
              ("<f12>" . anki-editor-cloze-region-auto-incr)
              ("<f11>" . anki-editor-cloze-region-dont-incr)
              ("<f10>" . anki-editor-reset-cloze-number)
              ("<f9>"  . anki-editor-push-tree))
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
        anki-editor-org-tags-as-anki-tags t)

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))
  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))
  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))
  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
  ;; Initialize
  (anki-editor-reset-cloze-number)
  )
#+end_src

#+RESULTS:
: anki-editor-push-tree

#+begin_src emacs-lisp

(setq org-my-anki-file "/ubuntu/home/sean/anki.org")

;; Allow Emacs to access content from clipboard.
(setq select-enable-clipboard t
      select-enable-primary t)
#+end_src

#+RESULTS:
: t

** screencast gif / keycast
arrumar o keycast
#+BEGIN_SRC emacs-lisp
(use-package gif-screencast)
(use-package keycast)
;;(setq keycast-insert-after "%e")
(with-eval-after-load 'gif-screencast
  (define-key gif-screencast-mode-map (kbd "<f8>") 'gif-screencast-toggle-pause)
  (define-key gif-screencast-mode-map (kbd "<f9>") 'gif-screencast-stop))
;;(setq mode-line-format mode-line-keycast)
#+END_SRC

#+RESULTS:
: gif-screencast-stop

** undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree)
(global-undo-tree-mode)
#+END_SRC

#+RESULTS:
: t

** pandoc

#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode)
(use-package pandoc)
#+END_SRC

#+RESULTS:

* interface
** frames only
esse daqui só presta se for pra usar os frames separados. Tipo no
Qtile, i3, xmonad e etc.

depende do 
#+BEGIN_SRC emacs-lisp
(use-package frames-only-mode)
(frames-only-mode 1)
#+END_SRC

#+RESULTS:
: t

** yes or no para y or n

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+RESULTS:
: y-or-n-p

** multiterm

#+begin_src emacs-lisp
(use-package multi-term)
#+end_src

#+RESULTS:

** which key

#+BEGIN_SRC emacs-lisp
(use-package which-key)
(which-key-mode 1)

;; (setq which-key-popup-type 'minibuffer)
(setq which-key-popup-type 'side-window)
(setq which-key-side-window-max-height 0.33)


#+END_SRC

#+RESULTS:
: 0.33

** edit with chrome
#+begin_src emacs-lisp
(edit-server-start)
#+end_src

#+RESULTS:
: An edit-server process is already running

** helm

#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :custom
  (bibtex-completion-bibliography '("/home/sean/Minha biblioteca.bib"))
  (reftex-default-bibliography '("//home/sean/Minha biblioteca.bib"))
  (bibtex-completion-notes-path "/ubuntu/home/sean/")
  (bibtex-completion-pdf-field "file")
  (bibtex-completion-notes-template-multiple-files
  (concat
   "#+TITLE: ${title}\n"
   "#+ROAM_KEY: cite:${=key=}\n"
   "* TODO Notes\n"
   ":PROPERTIES:\n"
   ":Custom_ID: ${=key=}\n"
   ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
   ":AUTHOR: ${author-abbrev}\n"
   ":JOURNAL: ${journaltitle}\n"
   ":DATE: ${date}\n"
   ":YEAR: ${year}\n"
   ":DOI: ${doi}\n"
   ":URL: ${url}\n"
   ":END:\n\n"
   ))
)
(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
		  ;; changed this
		  ;; helm-completion-in-region-fuzzy-match t
		  helm-completion-style 'emacs
		  
		  helm-split-window-inside-p t
          helm-quick-update t
		  ;; helm-mode-fuzzy-match t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings)))

(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+END_SRC

#+RESULTS:

*** pacotes adicionais helm

#+begin_src emacs-lisp
(use-package helm-swoop)
(use-package helm-c-yasnippet)
(use-package helm-cider)
(use-package helm-org-rifle)
#+end_src

#+RESULTS:

*** atalhos do teclado

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'helm-occur)
#+END_SRC

#+RESULTS:
: helm-occur

** org-roam-bibtex
#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
;; changed this 
  (setq orb-preformat-keywords
   '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

           :unnarrowed t))))
#+end_src

#+RESULTS:

** hydra

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

#+RESULTS:

** god mode
#+begin_src emacs-lisp
(use-package god-mode
  :config
  (define-key god-local-mode-map (kbd "i") 'god-local-mode)
  (global-set-key (kbd "<escape>") 'god-local-mode))

(god-mode-all)

(defun my-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'box
                      'bar)))

(add-hook 'god-mode-enabled-hook 'my-update-cursor)
(add-hook 'god-mode-disabled-hook 'my-update-cursor)
#+end_src

#+RESULTS:
| my-update-cursor |

** espeak
fazer ele não abrir essa janela
#+BEGIN_SRC emacs-lisp
;; depende do espeak
(defun espeak (text)
  "Speaks text by espeak"
  (save-window-excursion
    (let* ((amplitude 100)
           (voice 'brazil)
           (command (format "espeak -a %s -v %s \"%s\"" amplitude voice text)))
      (async-shell-command command "*Messages*" "*Messages*"))))
#+END_SRC

#+RESULTS:
: espeak

** desktop save

#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

#+RESULTS:
: t

** key binds

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

#+RESULTS:
: ibuffer

* Org mode
** PRA FAZER Módulos adicionais

#+BEGIN_SRC emacs-lisp
(setq org-enable-org-journal-support t)
(add-to-list 'org-modules 'org-tempo t)
;; não sei porque mas os módulos do org-plus-contrib precisam ser usados com require
(require 'org-habit)
(require 'org-tempo)
;; TODO este pedaço não está funcionando
(setq org-startup-folded 'content) ;; default t)
(use-package org-journal
  :bind
  ("C-c n j" . org-journal-new-entry))

(use-package org-pretty-tags)
(use-package org-ref
    :config
    (setq
         org-ref-completion-library 'org-ref-ivy-cite
         org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
         org-ref-default-bibliography (list "/home/sean/Minha biblioteca.bib")
         org-ref-bibliography-notes "/ubuntu/home/sean/biblio.org"
         org-ref-note-title-format "* PRA FAZER %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
         org-ref-notes-directory "/ubuntu/home/sean/"
         org-ref-notes-function 'orb-edit-notes))

(use-package org-download
  :custom
  (org-download-screenshot-method "gnome-screenshot")
  (org-download-image-dir "./assets/images"))
(use-package html-to-markdown)
(use-package ox-jekyll-md)
(use-package ox-epub)
(use-package auto-org-md)
(setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
(setq plantuml-default-exec-mode 'jar)
#+END_SRC

#+RESULTS:
: jar

** PRA FAZER org-noter
https://orgmode.org/manual/Initial-visibility.html
olhar isso daqui e mexer nas coisas do org mode depois
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :config
  (setq org-noter-auto-save-last-location t
		org-noter-notes-window-behavior '(start scroll)
		org-noter-hide-other nil
		;; abrir em outra janela
		org-noter-notes-window-location 'other-frame
		;; org-noter-notes-window-location 'horizontal-split
		org-noter-separate-notes-from-heading t)

  (defun org-noter-init-pdf-view ()
	(pdf-view-fit-page-to-window))
;;	(pdf-view-auto-slice-minor-mode)
	;; (run-at-time "0.5 sec" nil #'org-noter))

  (add-hook 'pdf-view-mode-hook 'org-noter-init-pdf-view))
  
(defun org-noter-insert-pdf-slice-note (event &optional switch-back)
  (interactive "@e")
  (setq current-b (buffer-name))
  (progn  (pdf-view-mouse-set-region-rectangle event)
		  (pdf-view-extract-region-image pdf-view-active-region
										 (pdf-view-current-page)
										 (pdf-view-image-size)
										 (get-buffer-create "teste")
										 t)
		  (set-buffer "teste")
		  (write-file "/tmp/screenshot.png" nil)
		  (kill-buffer "screenshot.png")
		  (set-buffer current-b)
		  (org-noter-insert-note)
		  (org-download-screenshot)
		  (if switch-back			 
			  (switch-to-buffer-other-frame current-b))))

(define-key pdf-view-mode-map [C-M-down-mouse-1] 'org-noter-insert-pdf-slice-note)
#+END_SRC

#+RESULTS:
: org-noter-insert-pdf-slice-note

** PRA FAZER org-agenda
ajeitar esse refile seria uma boa
também preciso arrumar o que vai parar na agenda
#+BEGIN_SRC emacs-lisp
  ;; org-agenda load na pasta do emacs

  ;; TODO colocar os arquivos direitinho nesse negócio
  (setq org-agenda-files '("~/.emacs.d/config.org"
                           "/ubuntu/home/sean"))

  ;;						 "~/vest/"))
  ;;						 "~/vest/vestibular.org"


  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

#+RESULTS:
: org-agenda

** org aparência
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
;;(add-hook 'org-mode-hook (lambda () (writeroom-mode 1)))

(setq org-startup-with-inline-images t)
(add-hook
 'org-babel-after-execute-hook
 (lambda ()
   (when org-inline-image-overlays
     (org-redisplay-inline-images))))
;; todo states
;; (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✓ PRONTO(p)")
;;                           (sequence "⚑ ESPERANDO(e)" "|")
;;                           (sequence "|" "✘ CANCELADO(c)")))
(setq org-todo-keywords '((sequence "PRA FAZER(t)" "ESPERANDO(e)" "NÃO ENTENDI(n)" "REVER(r)" "|" "PRONTO(p)" "CANCELADO(c)")))

(add-hook 'org-mode-hook (lambda () (auto-fill-mode 1)))

(use-package org-bullets)

(setq org-startup-indented t
	  ;; depende do pacote org-bullets
      org-bullets-bullet-list '("一" "二" "三" "四" "五" "六" "七" "八" "九" "十")
	  org-ellipsis "";; " ⤵" ;; folding symbol
      org-pretty-entities t
      org-hide-emphasis-markers nil       ;; show actually italicized text instead of /italicized text/
      org-agenda-block-separator ""
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t
      org-special-ctrl-a/e t)
#+END_SRC

#+RESULTS:
: t

** PRA FAZER org roam
#+begin_src emacs-lisp

  (use-package org-roam
    :hook (org-load . org-roam-mode)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :preface
    ;; Set this to nil so we can later detect whether the user has set a custom
    ;; directory for it, and default to `org-directory' if they haven't.
    ;; (defvar org-roam-directory nil)
    :init
    :config
    (add-to-list 'org-roam-capture-templates
                 '("w" "webref" plain (function org-roam-capture--get-point)
                   "%?"
                   :file-name "web/${slug}"
                   :head "#+TITLE: ${title}\n#+ROAM_KEY: %x\n#+ROAM_ALIAS: \n#+ROAM_TAGS: ${tags} \n#+CREATED: %u\n#+LAST_MODIFIED: %U\n- links :: \n\n"
                   :unnarrowed t))
    (add-to-list 'org-roam-capture-templates '("r" "regular" plain (function org-roam-capture--get-point)
                                               "%?"
                                               :file-name "${slug}"
                                               :head "#+TITLE: ${title}\n#+ROAM_KEY: \n#+ROAM_ALIAS: \n#+ROAM_TAGS: ${tags} \n#+CREATED: %u\n#+LAST_MODIFIED: %U\n- links :: \n\n"
                                               :unnarrowed t))
    (require 'org-roam-protocol)
    (setq 
  ;; org-roam-directory (expand-file-name (or org-roam-directory "roam")
  ;;                                               org-directory)
          org-roam-verbose nil  ;; https://youtu.be/fn4jIlFwuLU
  ;; changed this 
          ;; org-roam-buffer-no-delete-other-windows t ;; make org-roam buffer sticky
                  org-roam-buffer-window-parameters '((no-delete-other-windows . t))
          org-roam-completion-system 'default
                  org-roam-graph-executable "/usr/bin/dot"
                  org-roam-graph-viewer "/usr/bin/google-chrome-stable"
                  org-roam-completion-system 'helm
                  org-roam-index-file "index.org"


    ;; Normally, the org-roam buffer doesn't open until you explicitly call
    ;; `org-roam'. If `+org-roam-open-buffer-on-find-file' is non-nil, the
    ;; org-roam buffer will be opened for you when you use `org-roam-find-file'
    ;; (but not `find-file', to limit the scope of this behavior).
    ;; (add-hook 'find-file-hook
    ;;   (defun +org-roam-open-buffer-maybe-h ()
    ;;     (and +org-roam-open-buffer-on-find-file
    ;;          (memq 'org-roam-buffer--update-maybe post-command-hook)
    ;;          (not (window-parameter nil 'window-side)) ;; don't proc for popups
    ;;          (not (eq 'visible (org-roam-buffer--visibility)))
    ;;          (with-current-buffer (window-buffer)
    ;;            (org-roam-buffer--get-create)))))

    ;; ;; Hide the 
    ;; mode line in the org-roam buffer, since it serves no purpose. This
    ;; makes it easier to distinguish among other org buffers.
    ;; (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
                  )
    :bind (:map org-roam-mode-map
                            (("C-c n l" . org-roam)
                             ("C-c n f" . org-roam-find-file)
                             ("C-c n g" . org-roam-graph)
                             ("C-c n i" . org-roam-insert)
                             ("C-c n I" . org-roam-insert-immediate)
                             ("C-c n d" . deft)))
    )


  ;; Since the org module lazy loads org-protocol (waits until an org URL is
  ;; detected), we can safely chain `org-roam-protocol' to it.

  ;; (use-package org-roam-protocol
  ;;   :after org-protocol)


  (use-package company-org-roam
    :after org-roam
    :config
  (push 'company-org-roam company-backends)
  )
    ;; (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev))
#+end_src

#+RESULTS:

** org pomodoro
:LOGBOOK:
CLOCK: [2020-01-02 qui 21:08]--[2020-01-02 qui 21:58] =>  0:50
CLOCK: [2020-01-02 qui 20:07]--[2020-01-02 qui 20:57] =>  0:50
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro)
;; duração
(setq org-pomodoro-length 50)
;; duração dos intervalos curtos
(setq org-pomodoro-short-break-length 10)
;;duração dos intervalos longos
(setq org-pomodoro-long-break-length 20)
;; frequência dos intervalos longos
(setq org-pomodoro-long-break-frequency 3)

(setq org-pomodoro-audio-player "mplayer")

(setq org-pomodoro-finished-sound-args "-volume 0.4")
(setq org-pomodoro-long-break-sound-args "-volume 0.4")
(setq org-pomodoro-short-break-sound-args "-volume 0.4")

#+END_SRC

#+RESULTS:
: -volume 0.4

** org clock 
tem uns bugs, mas acho que é no xmobar
dar uma detalhada no bug do xmobar
#+BEGIN_SRC emacs-lisp
(defun hhmmtomm (time)
  "converts hh:mm formated time string to minutes int"
  (if time
   (if (= 4 (length time))
	   (+ (* (string-to-number (substring time 0 1)) 60)
		  (string-to-number (substring time 2)))
	   (+ (* (string-to-number (substring time 0 2)) 60)
		  (string-to-number (substring time 3))))
   0))

(defun speak-current-task ()
  "function that says the name out loud"
  (espeak org-clock-current-task))

(display-time)
(defun esf/org-clocking-info-to-file ()
  (with-temp-file "/tmp/clocking"
    ;; (message (org-clock-get-clock-string))
    (if (org-clock-is-active)
        (insert (format "\ue003 %s: %d (%d->%d) min %d cd"
						org-clock-heading
                        (- (org-clock-get-clocked-time) org-clock-total-time)
                        org-clock-total-time
                        (org-clock-get-clocked-time)  ;; all time total
						(- (hhmmtomm org-clock-effort)
						   (- (org-clock-get-clocked-time)
							  org-clock-total-time))))))) ;;(org-clock-get-clock-string)
(esf/org-clocking-info-to-file)
(add-hook 'org-clock-in 'esf/org-clocking-info-to-file)
(add-hook 'org-clock-in-prepare-hook 'esf/org-clocking-info-to-file)
(add-hook 'display-time-hook 'esf/org-clocking-info-to-file)
#+END_SRC

#+RESULTS:
| esf/org-clocking-info-to-file |

** interface speed
#+begin_src emacs-lisp
(setq org-use-speed-commands 1)
#+end_src

#+RESULTS:
: 1

** interface

#+begin_src emacs-lisp
(defun my/insert-text-after-heading (text)
  "Insert TEXT after every heading in the file, skipping property drawers."
  (interactive "sText to insert: ")

  ;; The Org Element API provides functions that allow you to map over all
  ;; elements of a particular type and perform modifications. However, as
  ;; as soon as the buffer is modified the parsed data becomes out of date.
  ;;
  ;; Instead, we treat the buffer as text and use other org-element-*
  ;; functions to parse out important data.

  ;; Use save-excursion so the user's point is not disturbed when this code
  ;; moves it around.
  (save-excursion
    ;; Go to the beginning of the buffer.
    (goto-char (point-min))

    ;; Use save-match-data as the following code uses re-search-forward,
    ;; will disturb any regexp match data the user already has.
    (save-match-data

      ;; Search through the buffer looking for headings. The variable
      ;; org-heading-regexp is defined by org-mode to match anything
      ;; that looks like a valid Org heading.
      (while (re-search-forward org-heading-regexp nil t)

        ;; org-element-at-point returns a list of information about
        ;; the element the point is on. This includes a :contents-begin
        ;; property which is the buffer location of the first character
        ;; of the contents after this headline.
        ;;
        ;; Jump to that point.
        (goto-char (org-element-property :contents-begin (org-element-at-point)))

        ;; Point is now on the first character after the headline. Find out
        ;; what type of element is here using org-element-at-point.
        (let ((first-element (org-element-at-point)))

          ;; The first item in the list returned by org-element-at-point
          ;; says what type of element this is.  See
          ;; https://orgmode.org/worg/dev/org-element-api.html for details of
          ;; the different types.
          ;;
          ;; If this is a property drawer we need to skip over it. It will
          ;; an :end property containing the buffer location of the first
          ;; character after the property drawer. Go there if necessary.
          (when (eq 'property-drawer (car first-element))
            (goto-char (org-element-property :end first-element))))

      ;; Point is now after the heading, and if there was a property
      ;; drawer then it's after that too. Insert the requested text.
      (insert text "\n\n")))))
#+end_src

#+RESULTS:
: my/insert-text-after-heading

** PRA FAZER org refile
arrumar isso
#+begin_src emacs-lisp
;; org refiling pra mandar as tarefas de um arquivo pra outro
(setq org-refile-targets (quote (;;("~/semana.org" :maxlevel . 1)
								 ;;("~/notes_accomplished.org" :maxlevel . 1)
								 ;;("~/vest/vestibular.org" :maxlevel . 1)
								 ;; ("~/done.org" :maxlevel . 1) 
								 ;; ("~/ossu/ossu.org" :maxlevel . 1)
								 ("/ubuntu/home/sean/anki.org" :maxlevel . 1)
)))
#+end_src

#+RESULTS:
: ((/ubuntu/home/sean/anki.org :maxlevel . 1))

** PRA FAZER [#A] org capture

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "PRA FAZER" entry (file+headline "~/semana.org" "Tarefas")
	     "* PRA FAZER %^{Descrição breve} %^g \n \n %? \n Adicionado em: %U")
        ("c" "Checklist" entry (file+headline "~/semana.org" "Tarefas")
         "* PRA FAZER %^{Descrição breve} [/] %^g \n- [ ] %? \n Adicionado em: %U")
        ("p" "Programming TODO" entry (file+headline "~/semana.org" "projetos")
         "* PRA FAZER %^{Descrição breve} %^g \n %? \n link: %a \n Adicionado em: %U")
        ("n" "Programming Notes" entry (file+headline "~/ossu/prognotes.org" "notas")
         "* %^{Descrição} %^g \n %x \n")
        ("w" "Citações" entry (file+headline "~/lang/citações.org" "citações")
         "* %^{Descrição} %^gdrill: \n %x \n")
        ("i" "Info" entry (file+headline "~/Documents/emacs.org" "emacs")
         "* %^{Descrição} \n %? \n link: %a \n %:node")
        ("e" "emacs" entry (file+headline "~/Documents/emacs.org" "emacs")
         "* %^{Descrição}  %^g\n %x \n")
        ("j" "日本語" entry (file+headline "~/lang/lang.org" "文法[ぶんぽう]")
         "* %^{Descrição da gramática}\n %? \n")
        ("l" "links internet clipboard" entry (file+headline "~/Desktop/links.org" "links")
         "* %^{Descrição} \n [%x] \n %")
        ("a" "livros/artigos" entry (file+headline "~/Documents/livros.org" "livros")
         "* %^{Título} %^g :referência: \n :PROPERTIES: \n Criado em: %U \n Link: %a \
 \n :END: \n %i \n Descrição:\n %?"
         :prepend t
         :empty-lines 1
         :created t)
		;; Org-capture anki templates
		("b" "Anki basic"
		 entry
		 (file+headline org-my-anki-file "Dispatch Shelf")
		 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%?\n** Back\n%x\n")
		("B" "Anki cloze"
		 entry
		 (file+headline org-my-anki-file "Dispatch Shelf")
		 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%x\n** Extra\n")
		))

(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+RESULTS:
: org-capture

*** anki comments

- Note the %x in org-capture-templates: this means we want to fill in
  content of X clipboard upon capture. For Cloze note, this would be
  in Text field. For Basic note, I usually like to put them in Back,
  and come up with a good question for Front field.

- The key to be as lazy as possible is to let Emacs not only read
  explicitly copied/paste content (via C-c / C-v, the CLIPBOARD
  selection), but also the currently selected text (the PRIMARY
  selection). That way, after highlighting text with mouse I can
  immediately call org-capture (C-c c) in Emacs. See Clipboard -
  ArchWiki for details.

- Header name does not really matter in anki-editor, %H:%M is an
  arbitrary choice

- I put most notes in a Mega deck following Michael Nielson’s advice
  (Search “Use one big deck”). It served me well. If you have many
  decks/note types, you may want to create multiple capture templates,
  or write some elisp functions to reduce typing.

** org roam capture
#+begin_src emacs-lisp

#+end_src
** org babel

#+BEGIN_SRC emacs-lisp
(use-package ob-sml)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure    . t)
   (dot        . t)
   (shell      . t)
   (C          . t)
   ;;(cpp        . t)
   (sml        . t)
   (haskell    . t)
   (scheme     . t)
   (sml        . t)
   (python     . t)
   (ocaml      . t)
   (restclient . t)
   (emacs-lisp . t)
   (plantuml   . t)
   (js         . t)
   (octave     . t)
   (R          . t)
   (ruby       . t)))

(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
	  org-src-preserve-indentation nil
	  org-edit-src-content-indentation 0)
#+END_SRC

#+RESULTS:
: 0



** org ref

#+BEGIN_SRC emacs-lisp
(use-package org-ref)
#+END_SRC

#+RESULTS:

** ox-reveal

#+BEGIN_SRC emacs-lisp
(use-package ox-reveal)
#+END_SRC

#+RESULTS:

** org-drill

#+BEGIN_SRC emacs-lisp
  ;; (require 'org-drill)
#+END_SRC

#+RESULTS:
: org-drill

* prog
** hooks

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (progn (linum-relative-mode 1)
									   (smartparens-mode 1)
									   (rainbow-delimiters-mode 1))))
#+END_SRC

#+RESULTS:
| (lambda nil (progn (linum-relative-mode 1) (smartparens-mode 1) (rainbow-delimiters-mode 1))) | smartparens-mode |

** PRA FAZER lsp
depois preciso ver isso com mais calma, acho que vale a pena
configurar pra clojure e pra python. Haskell acho que vai ocupar muito
espaço no disco.
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :requires lsp-mode flycheck
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable t
		lsp-ui-doc-use-childframe t
		lsp-ui-doc-position 'top
		lsp-ui-doc-include-signature t
		lsp-ui-sideline-enable nil
		lsp-ui-flycheck-enable t
		lsp-ui-flycheck-list-position 'right
		lsp-ui-flycheck-live-reporting t
		lsp-ui-peek-enable t
		lsp-ui-peek-list-width 60
		lsp-ui-peek-peek-height 25))

(use-package company-lsp
  :requires company
  :commands company-lsp
  :config
  (push 'company-lsp company-backends)
  ;; Disable client-side cache because the LSP server does a better job.
  (setq company-transformers nil
        company-lsp-async t
        company-lsp-cache-candidates nil))

(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list)
(use-package helm-lsp
  :after helm
  :commands helm-lsp-workspace-symbol
  :config
  (defun netrom/helm-lsp-workspace-symbol-at-point ()
	(interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-workspace-symbol)))
  
  (defun netrom/helm-lsp-global-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-global-workspace-symbol))))


(use-package dap-mode)
;;(use-package lsp-python)
;;(use-package lsp-clangd)

(use-package lsp-mode
  :requires hydra helm helm-lsp
  :commands (lsp lsp-deferred)
  :hook (haskell-mode . lsp)
  :config
(setq lsp-diagnostic-package nil
;; changed this 
;; lsp-prefer-flymake nil
		netrom--general-lsp-hydra-heads
        '(;; Xref
          ("d" xref-find-definitions "Definitions" :column "Xref")
          ("D" xref-find-definitions-other-window "-> other win")
          ("r" xref-find-references "References")
          ("s" netrom/helm-lsp-workspace-symbol-at-point "Helm search")
          ("S" netrom/helm-lsp-global-workspace-symbol-at-point "Helm global search")

          ;; Peek
          ("C-d" lsp-ui-peek-find-definitions "Definitions" :column "Peek")
          ("C-r" lsp-ui-peek-find-references "References")
          ("C-i" lsp-ui-peek-find-implementation "Implementation")

          ;; LSP
          ("p" lsp-describe-thing-at-point "Describe at point" :column "LSP")
          ("C-a" lsp-execute-code-action "Execute code action")
          ("R" lsp-rename "Rename")
          ("t" lsp-goto-type-definition "Type definition")
          ("i" lsp-goto-implementation "Implementation")
          ("f" helm-imenu "Filter funcs/classes (Helm)")
          ("C-c" lsp-describe-session "Describe session")

          ;; Flycheck
          ("l" lsp-ui-flycheck-list "List errs/warns/notes" :column "Flycheck"))

        netrom--misc-lsp-hydra-heads
        '(;; Misc
          ("q" nil "Cancel" :column "Misc")
          ("b" pop-tag-mark "Back")))
   ;; Create general hydra.
   (eval `(defhydra netrom/lsp-hydra (:color blue :hint nil)
			,@(append
			   netrom--general-lsp-hydra-heads
			   netrom--misc-lsp-hydra-heads)))

  (add-hook 'lsp-mode-hook
            (lambda () (local-set-key (kbd "C-c C-l") 'netrom/lsp-hydra/body))))
#+end_src

#+RESULTS:

** clojure

#+begin_src emacs-lisp
(use-package cider)
#+end_src

#+RESULTS:

** CANCELADO arduino

#+begin_src emacs-lisp
;; (use-package arduino-mode)
#+end_src

#+RESULTS:

** markdown
#+begin_src emacs-lisp
(use-package 
  markdown-mode 
  :commands (markdown-mode gfm-mode)
  ;; github flavor markdown
  :mode (("README\\.md\\'" . gfm-mode) 
	 ("\\.md\\'" . markdown-mode) 
	 ("\\.markdown\\'" . markdown-mode)) 
  :init (setq markdown-command "multimarkdown"))
#+end_src

#+RESULTS:
: ((\.markdown\' . markdown-mode) (\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.epub\' . nov-mode) (\.[pP][dD][fF]\' . pdf-view-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (\<\(models\|views\|handlers\|feeds\|sitemaps\|admin\|context_processors\|urls\|settings\|tests\|assets\|forms\)\.py\' . django-mode) (\.djhtml$ . django-html-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION\' . conf-colon-mode) (/Makevars\(\.win\)?\' . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (\(?:\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\)\'\) . json-mode) (\.jl\' . julia-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.\(plantuml\|pum\|plu\)\' . plantuml-mode) (\.grm\' . sml-yacc-mode) (\.cm\' . sml-cm-mode) (\.s\(ml\|ig\)\' . sml-mode) (\.ts$ . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:avs\|bmp[23]?\|c\(?:als?\|myka?\|u[rt]\)\|d\(?:c[mx]\|ds\|px\)\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|m\(?:iff\|ng\|s\(?:l\|vg\)\|tv\)\|otb\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:as\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck)
  ;; :ensure t)
  ;; :init
  ;; (add-hook 'prog-mode-hook 'flycheck-mode))
  ;;(global-flycheck-mode t))
(use-package flycheck-irony)
(use-package flycheck-haskell)
(use-package flycheck-pycheckers)
(use-package flycheck-plantuml)
(use-package flycheck-cask)
#+END_SRC

#+RESULTS:

** magit git

#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

#+RESULTS:

** PRA FAZER company

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'company-mode)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))

;; global company mode
(add-hook 'after-init-hook 'global-company-mode)

(setq company-dabbrev-other-buffers t)

(use-package company-math)
(use-package company-box
  :hook (company-mode . company-box-mode)
  :config
  (setq company-box-doc-delay 0.3)
  (setq company-box-enable-icon nil)
  (setq company-box-color-icon nil))

(eval-after-load 'company
  '(define-key company-active-map (kbd "C-n") #'company-select-next-or-abort))
(eval-after-load 'company
  '(define-key company-active-map (kbd "C-p") #'company-select-previous-or-abort))
#+END_SRC

#+RESULTS:
: company-select-previous-or-abort

*** company colors
#+begin_src emacs-lisp
(let ((bg (face-attribute 'default :background)))
    (custom-set-faces
     `(company-tooltip ((t (:inherit default :background ,bg))))
     `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
     `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
     `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
     `(company-tooltip-common ((t (:inherit font-lock-constant-face))))))
#+end_src

** outros parametros
*** tamanho das tabulações

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

#+RESULTS:
: 4

** web

#+begin_src emacs-lisp
(use-package emmet-mode
:ensure t
:defer t
:mode ("\\.html\\'"
	   "\\.css\\'"
	   "\\.ejs\\'"))

(use-package css-mode
:ensure t
:defer t
:mode "\\.css\\'")

(unless (package-installed-p 'indium)
  (use-package indium))
(setq indium-chrome-executable "google-chrome-stable")

(use-package json-mode
:ensure t
:defer t)
(use-package typescript-mode
:ensure t
:defer t)
(use-package js2-mode
:mode ("\\.js\\'" . js2-mode)
:ensure t
:defer t)
(use-package web-mode
:ensure t
:defer t
:mode ("\\.html\\'"
 ;; "\\.css\\'"
 "\\.php\\'"
 "\\.ejs\\'"))

(setq web-mode-enable-current-column-highlight t
	  web-mode-enable-current-element-highlight t)
(add-hook 'web-mode-hook 'emmet-mode)
(setq emmet-move-cursor-between-quotes t)

(add-hook 'web-mode-before-auto-complete-hooks
    '(lambda ()
     (let ((web-mode-cur-language
  	    (web-mode-language-at-pos)))
               (if (string= web-mode-cur-language "php")
    	   (yas-activate-extra-mode 'php-mode)
      	 (yas-deactivate-extra-mode 'php-mode))
               (if (string= web-mode-cur-language "css")
    	   (setq emmet-use-css-transform t)
      	 (setq emmet-use-css-transform nil)))))

#+end_src

#+RESULTS:
| lambda | nil | (let ((web-mode-cur-language (web-mode-language-at-pos))) (if (string= web-mode-cur-language php) (yas-activate-extra-mode (quote php-mode)) (yas-deactivate-extra-mode (quote php-mode))) (if (string= web-mode-cur-language css) (setq emmet-use-css-transform t) (setq emmet-use-css-transform nil))) |

*** PRA FAZER javascript prettier
#+begin_src emacs-lisp
;; (setq company-tooltip-align-annotations t)

;; (setq flycheck-javascript-standard-executable "/home/sean/.npm-global/bin/standardx")
;; (use-package prettier-js)

;; (add-hook 'js-mode-hook #'setup-tide-mode)
(add-hook 'js-mode-hook 'prettier-js-mode)

(setq prettier-js-args '(
  "--trailing-comma" "none"
  "--bracket-spacing" "true"
  "--single-quote" "true"
  "--no-semi" "true"
  "--jsx-single-quote" "true"
  "--jsx-bracket-same-line" "true"
  "--print-width" "100"))
#+end_src

*** rest client
#+begin_src emacs-lisp
(use-package restclient)
(use-package ob-restclient)
#+end_src

** CANCELADO smart parens

#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-<right>") 'sp-forward-slurp-sexp)
;; (global-set-key (kbd "C-<left>") 'sp-forward-barf-sexp)
;; (global-set-key (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
;; (global-set-key (kbd "C-M-<right>") 'sp-backward-barf-sexp)

#+END_SRC

#+RESULTS:

** auctex

#+begin_src emacs-lisp
#+end_src

#+RESULTS:

** yasnippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (defun mars/company-backend-with-yas (backends)
      "Add :with company-yasnippet to company BACKENDS.
Taken from https://github.com/syl20bnr/spacemacs/pull/179."
      (if (and (listp backends) (memq 'company-yasnippet backends))
	  backends
	(append (if (consp backends)
		    backends
		  (list backends))
		'(:with company-yasnippet))))

    ;; add yasnippet to all backends
  (setq company-backends
		(mapcar #'mars/company-backend-with-yas company-backends)))
(use-package auto-yasnippet
  :config
  (global-set-key (kbd "C-,") #'aya-create)
  (global-set-key (kbd "C-.") #'aya-expand))
(use-package yasnippet-snippets
  :config
  (setq yas-snippet-dirs '("/home/sean/.emacs.d/snippets" yasnippet-snippets-dir "/home/sean/.emacs.d/elpa/haskell-snippets-20160919.22/snippets")))
#+END_SRC

#+RESULTS:
: t

** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
(setq projectile-use-git-grep t)
#+END_SRC

#+RESULTS:
: t

** helm dash

#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :config
   (setq helm-dash-common-docsets '("Python_3" "Standard ML"))
   (setq helm-dash-browser-func 'browse-url))
#+END_SRC

#+RESULTS:
: t

** octave

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m" . octave-mode))
#+END_SRC

#+RESULTS:
: ((\.m . octave-mode) (\.ejs\' . web-mode) (\.php\' . web-mode) (\.html\' . web-mode) (\.js\' . js2-mode) (\.ejs\' . emmet-mode) (\.css\' . emmet-mode) (\.html\' . emmet-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.epub\' . nov-mode) (\.[pP][dD][fF]\' . pdf-view-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (\<\(models\|views\|handlers\|feeds\|sitemaps\|admin\|context_processors\|urls\|settings\|tests\|assets\|forms\)\.py\' . django-mode) (\.djhtml$ . django-html-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION\' . conf-colon-mode) (/Makevars\(\.win\)?\' . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (\(?:\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\)\'\) . json-mode) (\.jl\' . julia-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.\(plantuml\|pum\|plu\)\' . plantuml-mode) (\.grm\' . sml-yacc-mode) (\.cm\' . sml-cm-mode) (\.s\(ml\|ig\)\' . sml-mode) (\.ts$ . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:avs\|bmp[23]?\|c\(?:als?\|myka?\|u[rt]\)\|d\(?:c[mx]\|ds\|px\)\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|m\(?:iff\|ng\|s\(?:l\|vg\)\|tv\)\|otb\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:as\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** C

#+BEGIN_SRC emacs-lisp
(use-package company-irony)
#+END_SRC

#+RESULTS:

** python

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda)

(add-hook 'python-mode-hook
		  (lambda () (setq tab-width 4
					  python-indent-offset 4)))
#+END_SRC

#+RESULTS:
| lambda | nil | (setq tab-width 4 python-indent-offset 4) |

*** django
#+begin_src emacs-lisp
(use-package django-mode)
;; (yas/load-directory "/home/sean/.emacs.d/elpa/django-mode-20170522.714/snippets")
;; (add-to-list 'auto-mode-alist '("\\.djhtml$" . django-html-mode))
#+end_src

#+RESULTS:

** haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-snippets)
(use-package company-ghci)
(use-package lsp-haskell
  :ensure t
  :config
  (setq lsp-haskell-process-path-hie "ghcide")
  (setq lsp-haskell-process-args-hie '()))
#+END_SRC

#+RESULTS:
: t

** lisp

#+begin_src emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
#+end_src

#+RESULTS:
: parenthesis

** sml

#+BEGIN_SRC emacs-lisp
(use-package sml-mode)
#+END_SRC

#+RESULTS:

** ESS R stats

#+BEGIN_SRC emacs-lisp
(use-package ess)
(use-package ess-smart-underscore)
#+END_SRC

#+RESULTS:

** howdoyou stackoverflow consult

#+BEGIN_SRC emacs-lisp
(use-package howdoyou)

(with-eval-after-load "helm-net"
  (push (cons "How Do You"  (lambda (candidate) (howdoyou-query candidate)))
        helm-google-suggest-actions))
#+END_SRC

#+RESULTS:
: ((How Do You lambda (candidate) (howdoyou-query candidate)) (Google Search . helm-google-suggest-action) (Wikipedia lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-wikipedia-url candidate)) (Youtube lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-youtube-url candidate)) (IMDb lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-imdb-url candidate)) (Google Maps lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-maps-url candidate)) (Google News lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-news-url candidate)))



